<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for Perla on JDBC.
-->
<beans 	xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- import the dataSource definition -->
    <import resource="applicationContext-dataSource.xml"/>

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->	
	<bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED,ISOLATION_SERIALIZABLE,-DataAccessException</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-DataAccessException</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-DataAccessException</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	<bean id="utentiLogic" parent="baseTransactionProxy">
		<property name="target">
			<bean class="it.webapp.perla.logic.UtentiLogicImpl">
				<property name="utentiDao" ref="utentiDao"/>
			</bean>
		</property>
	</bean>
	
	<bean id="reportLogic" parent="baseTransactionProxy">
		<property name="target">
			<bean class="it.webapp.perla.logic.ReportLogicImpl">
				<property name="reportDao" ref="reportDao"/>
			</bean>
		</property>
	</bean>
	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>

	<!-- Configures the annotation-driven Spring MVC Controller programming model.
	Note that, with Spring 3.0, this tag works in Servlet MVC only! 
	<mvc:annotation-driven /> 
	 -->
	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
	<aop:aspectj-autoproxy/>
	-->
	
	<!--
		Instruct Spring to perform automatic transaction management on annotated classes.
		The SimpleJdbcClinic implementation declares @Transactional annotations.
		"proxy-target-class" is set because of SimpleJdbcClinic's @ManagedOperation usage.
	-->
	<tx:annotation-driven/>

	<!--
		Exporter that exposes the Clinic DAO and the CallMonitoringAspect via JMX,
		based on the @ManagedResource, @ManagedAttribute, and @ManagedOperation annotations.
	<context:mbean-export/>
	-->
	<!-- Perla central data access object using Spring's SimpleJdbcTemplate 
	<bean id="perla" class="org.springframework.samples.petclinic.jdbc.SimpleJdbcClinic"/>
	-->
	
	<!-- Call monitoring aspect that monitors call count and call invocation time 
	<bean id="callMonitor" class="org.springframework.samples.petclinic.aspects.CallMonitoringAspect"/>
	-->
	
	<!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
    The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet 
    container: this will happen - here with all other types of exceptions. -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
        <property name="exceptionMappings">
            <props>
                <prop key=".DataAccessException">dataAccessFailure</prop>
                <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                <prop key=".TypeMismatchException">resourceNotFound</prop>
                <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
            </props>
        </property>
    </bean>
    
    <!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload package 
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	-->
	
    <!-- Only needed because we install custom converters to support the examples in the org.springframewok.samples.mvc.convert package -->
	<!--  
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
            <bean class="org.springframework.samples.mvc.convert.MaskFormatAnnotationFormatterFactory" />
		</property>
	</bean>
	-->
	
    <!-- Enables the Spring MVC @Controller programming model -->
    <!--  
    <mvc:annotation-driven conversion-service="conversionService">
	    <mvc:argument-resolvers>
				<bean class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver"/>
		</mvc:argument-resolvers>
		<async-support default-timeout="3000">
			<mvc:callable-interceptors>
				<bean class="org.springframework.samples.mvc.async.TimeoutCallableProcessingInterceptor" />
			</mvc:callable-interceptors>
		</async-support>
	</mvc:annotation-driven>
	-->
</beans>